@page "/cinema/{Id}"
@rendermode InteractiveServer

@using Winx_Cinema.Shared.Dtos
@inject IHttpClientFactory httpClientFactory
@inject NavigationManager Navigation
@switch (filmDataState)
{
    case DataState.Loading:
        <MudText><em>Loading...</em></MudText>
        break;
    case DataState.Success:
        <MudGrid>
            <MudItem xs="9">
                <MudStack Spacing="2">
                    <VideoComponent Trailer="@film.TrailerPath" />

                    <h1 class="mb-0">@film.Title</h1>

                    @switch (sessionsDataState)
                    {
                        case DataState.Loading:
                            <MudText><em>Loading sessions...</em></MudText>
                            break;
                        case DataState.Success:
                            <MudStack Spacing="3">
                                @foreach (var dateSessionPair in sessions)
                                {
                                    <MudStack Spacing="1">
                                        <MudText class="mb-1">@ToStringDate(dateSessionPair.Key)</MudText>

                                        @foreach (var filmResSessionPair in dateSessionPair.Value)
                                        {
                                            <MudStack Spacing="3" Row="true" Wrap="Wrap.Wrap" AlignItems="AlignItems.Center">
                                                <MudText>@filmResSessionPair.Key.Resolution</MudText>
                                                @foreach (var session in filmResSessionPair.Value)
                                                {
                                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SelectSeat(session.Id.ToString())">@session.StartTime.ToString("H:mm")</MudButton>
                                                }
                                            </MudStack>
                                        }
                                    </MudStack>
                                }
                            </MudStack>
                            break;
                        case DataState.Missing:
                            <MudText><em>Session were not found...</em></MudText>
                            break;
                        case DataState.Failed:
                            <MudText><em>Failed to load sessions</em></MudText>
                            break;
                    }

                    <div class="mt-3">
                        <h6><b>Film description:</b></h6>
                        <MudText Typo="Typo.body1">@film.Description</MudText>
                    </div>
                </MudStack>
            </MudItem>
            <MudItem xs="3">
                <MudStack Spacing="3">
                    <MudImage Class="mb-4" Src="@film.PicturePath" />
                    <div>
                        <MudText Typo="Typo.subtitle2">Rating</MudText>
                        <MudText>@film.Rating</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle2">Release date</MudText>
                        <MudText>@film.ReleaseDate.ToString("dd/MM/yyyy")</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle2">Genre</MudText>
                        <MudText>@film.Genre</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle2">Cast</MudText>
                        <MudText>@film.Cast</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle2">Director</MudText>
                        <MudText>@film.Director</MudText>
                    </div>
                    <div>
                        <MudText Typo="Typo.subtitle2">Duration</MudText>
                        <MudText>@film.Duration</MudText>
                    </div>
                </MudStack>
            </MudItem>
        </MudGrid>
        break;
    case DataState.Missing:
        <MudText><em>Cinema was not found...</em></MudText>
        break;
    case DataState.Failed:
        <MudText><em>Failed to load data</em></MudText>
        break;
}

@code {
    [Parameter]
    public string? Id { get; set; }
    private FilmDto film = null!;
    private DataState filmDataState = DataState.Loading;
    private SortedDictionary<DateTime, Dictionary<FilmResolutionDto, IEnumerable<SessionDto>>> sessions = new();
    private DataState sessionsDataState = DataState.Loading;

    private string ToStringDate(DateTime dateTime)
    {
        string year = dateTime.Year != DateTime.UtcNow.Year ? dateTime.Year.ToString() + ' ' : string.Empty;
        return $"{year}{dateTime.Day} {dateTime.ToString("MMMM")} {dateTime.ToString("dddd")}";
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            filmDataState = DataState.Failed;
            return;
        }

        var client = httpClientFactory.CreateClient("localhost");
        var response = await client.GetAsync($"api/films/{Id}");

        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                var result = await response.Content.ReadFromJsonAsync<FilmDto>();
                if (result == null)
                {
                    filmDataState = DataState.Failed;
                    break;
                }
                film = result;
                filmDataState = DataState.Success;
                break;
            case System.Net.HttpStatusCode.NotFound:
                filmDataState = DataState.Missing;
                break;
            default:
                filmDataState = DataState.Failed;
                break;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (sessionsDataState == DataState.Loading && filmDataState == DataState.Success)
        {
            await UpdateSessions();
            StateHasChanged();
        }
    }

    private async Task UpdateSessions()
    {
        var filmResResponse = await FetchFilmResolutions();

        // Fetch FilmResolutions
        IEnumerable<FilmResolutionDto> filmResolutions;
        switch (filmResResponse.StatusCode)
        {
            case System.Net.HttpStatusCode.OK:
                var result = await filmResResponse.Content.ReadFromJsonAsync<IEnumerable<FilmResolutionDto>>();
                if (result == null)
                {
                    sessionsDataState = DataState.Failed;
                    return;
                }
                // Check if any FilmResolution were returned
                if (!result.Any())
                {
                    sessionsDataState = DataState.Missing;
                    return;
                }
                filmResolutions = result;
                break;
            case System.Net.HttpStatusCode.NotFound:
                sessionsDataState = DataState.Missing;
                return;
            default:
                sessionsDataState = DataState.Failed;
                return;
        }

        // Fetch relevant Sessions
        List<DateTime> dateTimes = new();
        Dictionary<FilmResolutionDto, IEnumerable<SessionDto>> filmSessions = new();
        foreach (var filmRes in filmResolutions)
        {
            var sessionsResponse = await FetchRelevantSessions(filmRes.Id.ToString());

            switch (sessionsResponse.StatusCode)
            {
                case System.Net.HttpStatusCode.OK:
                    var result = await sessionsResponse.Content.ReadFromJsonAsync<IEnumerable<SessionDto>>();
                    if (result == null)
                    {
                        sessionsDataState = DataState.Failed;
                        return;
                    }
                    // Check if any sessions were returned
                    if (!result.Any())
                        break;

                    filmSessions.Add(filmRes, result);
                    foreach (var session in result)
                        dateTimes.Add(session.StartTime.Date);
                    break;
                case System.Net.HttpStatusCode.NotFound:
                    break;
                default:
                    sessionsDataState = DataState.Failed;
                    return;
            }
        }

        // Check if any Sessions exist
        if (!filmSessions.Any())
        {
            sessionsDataState = DataState.Missing;
            return;
        }

        // Write results in sorted data structure
        var distDateTimes = dateTimes.Distinct();

        foreach (var dateTime in distDateTimes)
        {
            sessions.Add(dateTime, new Dictionary<FilmResolutionDto, IEnumerable<SessionDto>>());
            foreach (var filmRes in filmSessions.Keys)
            {
                var filteredSessions = filmSessions[filmRes]
                    .Where(s => s.StartTime.Date == dateTime)
                    .OrderBy(s => s.StartTime)
                    .ToList();
                if (filteredSessions.Any())
                    sessions[dateTime].Add(filmRes, filteredSessions);
            }
        }

        // Show sessions
        sessionsDataState = DataState.Success;
    }

    private async Task<HttpResponseMessage> FetchFilmResolutions()
    {
        var client = httpClientFactory.CreateClient("localhost");
        return await client.GetAsync($"api/filmResolutions/films/{Id}");
    }

    private async Task<HttpResponseMessage> FetchRelevantSessions(string filmResId)
    {
        var dateTime = DateTime.UtcNow;
        var date = dateTime.ToString("yyyy.MM.dd");
        var time = dateTime.ToString("HH:mm:ss");
        string query = $"time=>{date}T{time}";
        var client = httpClientFactory.CreateClient("localhost");
        return await client.GetAsync($"api/sessions/filmResolutions/{filmResId}?{query}");
    }
    private void SelectSeat(string sessionId)
    {
        
        if (sessionId!=null)
        {
            Navigation.NavigateTo($"/select-seat/{sessionId}");
        }
    }
    private enum DataState
    {
        Loading,
        Success,
        Missing,
        Failed
    }
}
