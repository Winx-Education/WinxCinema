@page "/login"
@rendermode InteractiveServer
@layout RegisterLoginLayout
@inject IHttpClientFactory httpClientFactory

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@using Winx_Cinema.Shared.Dtos

<style>
    .login-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background-color: #e0f7fa;
    }

    .login-paper {
        padding: 2rem;
        width: 100%;
        max-width: 400px;
        background: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-top: 6px solid #00796b;
    }

    .login-form {
        width: 100%;
    }

    .login-button {
        margin-top: 1rem;
        width: 100%;
        background-color: #00796b;
        color: #ffffff;
    }

        .login-button:hover {
            background-color: #004d40;
        }

    .error-message {
        color: #d32f2f;
        font-size: 0.875rem;
    }

    .login-input {
        margin-bottom: 1rem;
    }

        .login-input input {
            border: 1px solid #00796b;
            border-radius: 4px;
        }

        .login-input label {
            color: #00796b;
        }
</style>

<div class="login-container">
    <MudPaper Class="login-paper">
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Class="login-form">
            <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @ref="email" Class="login-input" />
            <MudText Class="error-message">@errorMessageforEmail</MudText>
            <MudTextField T="string" Label="Password" @ref="pwField1"
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Password is required!" Class="login-input" />
            <MudText Class="error-message">@passwordIsNotCorrect</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="onLogin" Class="login-button">Login</MudButton>
        </MudForm>
    </MudPaper>
</div>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1 = null!;
    MudTextField<string> email = null!;
    string errorMessageforEmail = string.Empty;
    string passwordIsNotCorrect = string.Empty;
    MudForm form = null!;

    private async Task onLogin()
    {
        if (form.IsValid)
        {
            var client = httpClientFactory.CreateClient("localhost");
            var newUser = new LoginDto
                {
                    Password = pwField1.Value,
                    Email = email.Value,
                };

            using StringContent jsonContent = new(
                JsonSerializer.Serialize(newUser),
                Encoding.UTF8,
                "application/json");

            var response = await client.PostAsync(
                "api/Users/login",
                jsonContent);
            var h = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
            if (h == null)
                return;

            Console.WriteLine(h.Token);
            if (h.LoginResults == Shared.Enums.LoginRegisterResults.IncorrectEmail)
            {
                errorMessageforEmail = "Email is incorrect";
            }
            else
            {
                errorMessageforEmail = string.Empty;
            }
            if (h.LoginResults == Shared.Enums.LoginRegisterResults.IncorrectPassword)
            {
                passwordIsNotCorrect = "Password is not correct";
            }
            else
            {
                passwordIsNotCorrect = string.Empty;
            }
        }
    }
}
